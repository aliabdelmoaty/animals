// Mocks generated by Mockito 5.4.6 from annotations
// in animals/test/features/home/ui/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:animals/features/home/domain/entities/breed_entity.dart'
    as _i11;
import 'package:animals/features/home/domain/usecases/add_favorite_usecase.dart'
    as _i4;
import 'package:animals/features/home/domain/usecases/get_breeds_usecase.dart'
    as _i2;
import 'package:animals/features/home/domain/usecases/get_favorites_usecase.dart'
    as _i6;
import 'package:animals/features/home/domain/usecases/remove_favorite_usecase.dart'
    as _i5;
import 'package:animals/features/home/domain/usecases/search_breeds_usecase.dart'
    as _i3;
import 'package:animals/features/home/presentation/cubit/breeds_cubit.dart'
    as _i7;
import 'package:animals/features/home/presentation/cubit/breeds_state.dart'
    as _i8;
import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetBreedsUseCase_0 extends _i1.SmartFake
    implements _i2.GetBreedsUseCase {
  _FakeGetBreedsUseCase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSearchBreedsUseCase_1 extends _i1.SmartFake
    implements _i3.SearchBreedsUseCase {
  _FakeSearchBreedsUseCase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddFavoriteUseCase_2 extends _i1.SmartFake
    implements _i4.AddFavoriteUseCase {
  _FakeAddFavoriteUseCase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRemoveFavoriteUseCase_3 extends _i1.SmartFake
    implements _i5.RemoveFavoriteUseCase {
  _FakeRemoveFavoriteUseCase_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetFavoritesUseCase_4 extends _i1.SmartFake
    implements _i6.GetFavoritesUseCase {
  _FakeGetFavoritesUseCase_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BreedsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedsCubit extends _i1.Mock implements _i7.BreedsCubit {
  @override
  _i2.GetBreedsUseCase get getBreedsUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getBreedsUseCase),
            returnValue: _FakeGetBreedsUseCase_0(
              this,
              Invocation.getter(#getBreedsUseCase),
            ),
            returnValueForMissingStub: _FakeGetBreedsUseCase_0(
              this,
              Invocation.getter(#getBreedsUseCase),
            ),
          )
          as _i2.GetBreedsUseCase);

  @override
  _i3.SearchBreedsUseCase get searchBreedsUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#searchBreedsUseCase),
            returnValue: _FakeSearchBreedsUseCase_1(
              this,
              Invocation.getter(#searchBreedsUseCase),
            ),
            returnValueForMissingStub: _FakeSearchBreedsUseCase_1(
              this,
              Invocation.getter(#searchBreedsUseCase),
            ),
          )
          as _i3.SearchBreedsUseCase);

  @override
  _i4.AddFavoriteUseCase get addFavoriteUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#addFavoriteUseCase),
            returnValue: _FakeAddFavoriteUseCase_2(
              this,
              Invocation.getter(#addFavoriteUseCase),
            ),
            returnValueForMissingStub: _FakeAddFavoriteUseCase_2(
              this,
              Invocation.getter(#addFavoriteUseCase),
            ),
          )
          as _i4.AddFavoriteUseCase);

  @override
  _i5.RemoveFavoriteUseCase get removeFavoriteUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#removeFavoriteUseCase),
            returnValue: _FakeRemoveFavoriteUseCase_3(
              this,
              Invocation.getter(#removeFavoriteUseCase),
            ),
            returnValueForMissingStub: _FakeRemoveFavoriteUseCase_3(
              this,
              Invocation.getter(#removeFavoriteUseCase),
            ),
          )
          as _i5.RemoveFavoriteUseCase);

  @override
  _i6.GetFavoritesUseCase get getFavoritesUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getFavoritesUseCase),
            returnValue: _FakeGetFavoritesUseCase_4(
              this,
              Invocation.getter(#getFavoritesUseCase),
            ),
            returnValueForMissingStub: _FakeGetFavoritesUseCase_4(
              this,
              Invocation.getter(#getFavoritesUseCase),
            ),
          )
          as _i6.GetFavoritesUseCase);

  @override
  _i8.BreedsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i9.dummyValue<_i8.BreedsState>(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _i9.dummyValue<_i8.BreedsState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i8.BreedsState);

  @override
  _i10.Stream<_i8.BreedsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i10.Stream<_i8.BreedsState>.empty(),
            returnValueForMissingStub: _i10.Stream<_i8.BreedsState>.empty(),
          )
          as _i10.Stream<_i8.BreedsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i10.Future<void> fetchBreeds({bool? refresh = false}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchBreeds, [], {#refresh: refresh}),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> loadMore() =>
      (super.noSuchMethod(
            Invocation.method(#loadMore, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  void searchBreeds(String? query) => super.noSuchMethod(
    Invocation.method(#searchBreeds, [query]),
    returnValueForMissingStub: null,
  );

  @override
  _i10.Future<void> toggleFavorite(_i11.BreedEntity? breed) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavorite, [breed]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  void emit(_i8.BreedsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i12.Change<_i8.BreedsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

import '../../domain/entities/breed_entity.dart';
import 'weight_model.dart';

class BreedModel extends BreedEntity {
  const BreedModel({
    required super.id,
    required super.name,
    required super.weight,
    super.cfaUrl,
    super.vetstreetUrl,
    super.vcahospitalsUrl,
    required super.temperament,
    required super.origin,
    required super.countryCodes,
    required super.countryCode,
    required super.description,
    required super.lifeSpan,
    required super.indoor,
    super.lap,
    required super.altNames,
    required super.adaptability,
    required super.affectionLevel,
    required super.childFriendly,
    required super.dogFriendly,
    required super.energyLevel,
    required super.grooming,
    required super.healthIssues,
    required super.intelligence,
    required super.sheddingLevel,
    required super.socialNeeds,
    required super.strangerFriendly,
    required super.vocalisation,
    required super.experimental,
    required super.hairless,
    required super.natural,
    required super.rare,
    required super.rex,
    required super.suppressedTail,
    required super.shortLegs,
    super.wikipediaUrl,
    required super.hypoallergenic,
    super.referenceImageId,
    super.isFavorite,
  });

  factory BreedModel.fromJson(Map<String, dynamic> json) {
    return BreedModel(
      id: json['id'] as String? ?? '',
      name: json['name'] as String? ?? '',
      weight: WeightModel.fromJson(json['weight'] ?? {}),
      cfaUrl: json['cfa_url'] as String?,
      vetstreetUrl: json['vetstreet_url'] as String?,
      vcahospitalsUrl: json['vcahospitals_url'] as String?,
      temperament: json['temperament'] as String? ?? '',
      origin: json['origin'] as String? ?? '',
      countryCodes: json['country_codes'] as String? ?? '',
      countryCode: json['country_code'] as String? ?? '',
      description: json['description'] as String? ?? '',
      lifeSpan: json['life_span'] as String? ?? '',
      indoor: json['indoor'] as int? ?? 0,
      lap: json['lap'] as int?,
      altNames: json['alt_names'] as String? ?? '',
      adaptability: json['adaptability'] as int? ?? 0,
      affectionLevel: json['affection_level'] as int? ?? 0,
      childFriendly: json['child_friendly'] as int? ?? 0,
      dogFriendly: json['dog_friendly'] as int? ?? 0,
      energyLevel: json['energy_level'] as int? ?? 0,
      grooming: json['grooming'] as int? ?? 0,
      healthIssues: json['health_issues'] as int? ?? 0,
      intelligence: json['intelligence'] as int? ?? 0,
      sheddingLevel: json['shedding_level'] as int? ?? 0,
      socialNeeds: json['social_needs'] as int? ?? 0,
      strangerFriendly: json['stranger_friendly'] as int? ?? 0,
      vocalisation: json['vocalisation'] as int? ?? 0,
      experimental: json['experimental'] as int? ?? 0,
      hairless: json['hairless'] as int? ?? 0,
      natural: json['natural'] as int? ?? 0,
      rare: json['rare'] as int? ?? 0,
      rex: json['rex'] as int? ?? 0,
      suppressedTail: json['suppressed_tail'] as int? ?? 0,
      shortLegs: json['short_legs'] as int? ?? 0,
      wikipediaUrl: json['wikipedia_url'] as String?,
      hypoallergenic: json['hypoallergenic'] as int? ?? 0,
      referenceImageId: json['reference_image_id'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'weight': (weight as WeightModel).toJson(),
      'cfa_url': cfaUrl,
      'vetstreet_url': vetstreetUrl,
      'vcahospitals_url': vcahospitalsUrl,
      'temperament': temperament,
      'origin': origin,
      'country_codes': countryCodes,
      'country_code': countryCode,
      'description': description,
      'life_span': lifeSpan,
      'indoor': indoor,
      'lap': lap,
      'alt_names': altNames,
      'adaptability': adaptability,
      'affection_level': affectionLevel,
      'child_friendly': childFriendly,
      'dog_friendly': dogFriendly,
      'energy_level': energyLevel,
      'grooming': grooming,
      'health_issues': healthIssues,
      'intelligence': intelligence,
      'shedding_level': sheddingLevel,
      'social_needs': socialNeeds,
      'stranger_friendly': strangerFriendly,
      'vocalisation': vocalisation,
      'experimental': experimental,
      'hairless': hairless,
      'natural': natural,
      'rare': rare,
      'rex': rex,
      'suppressed_tail': suppressedTail,
      'short_legs': shortLegs,
      'wikipedia_url': wikipediaUrl,
      'hypoallergenic': hypoallergenic,
      'reference_image_id': referenceImageId,
    };
  }

  BreedEntity toEntity() {
    return BreedEntity(
      id: id,
      name: name,
      weight: (weight as WeightModel).toEntity(),
      cfaUrl: cfaUrl,
      vetstreetUrl: vetstreetUrl,
      vcahospitalsUrl: vcahospitalsUrl,
      temperament: temperament,
      origin: origin,
      countryCodes: countryCodes,
      countryCode: countryCode,
      description: description,
      lifeSpan: lifeSpan,
      indoor: indoor,
      lap: lap,
      altNames: altNames,
      adaptability: adaptability,
      affectionLevel: affectionLevel,
      childFriendly: childFriendly,
      dogFriendly: dogFriendly,
      energyLevel: energyLevel,
      grooming: grooming,
      healthIssues: healthIssues,
      intelligence: intelligence,
      sheddingLevel: sheddingLevel,
      socialNeeds: socialNeeds,
      strangerFriendly: strangerFriendly,
      vocalisation: vocalisation,
      experimental: experimental,
      hairless: hairless,
      natural: natural,
      rare: rare,
      rex: rex,
      suppressedTail: suppressedTail,
      shortLegs: shortLegs,
      wikipediaUrl: wikipediaUrl,
      hypoallergenic: hypoallergenic,
      referenceImageId: referenceImageId,
      isFavorite: isFavorite,
    );
  }
}
